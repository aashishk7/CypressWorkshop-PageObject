{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2019-11-30T18:49:45.221Z",
    "end": "2019-11-30T18:50:28.040Z",
    "duration": 42819,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a38a868a-1e8d-4ed0-b035-8436521e13db",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9c6abb0-e756-4e7f-b129-844e90fbd1bf",
          "title": "Automation Test Suite ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My First Test Case",
              "fullTitle": "Automation Test Suite  My First Test Case",
              "timedOut": null,
              "duration": 40278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _this = this;\n//Object Creation for PageObject Page Class and assigning it to a constant variable\nvar homePage = new _HomePage.default();\nvar checkoutPage = new _CheckoutPage.default();\nvar billingPage = new _BillingPage.default(); //Calling\ncy.visit(Cypress.env('url'));\nhomePage.getUserName().type(this.data.Username);\nhomePage.getEmail().type(this.data.Email);\nhomePage.getPassword().type(this.data.Password); // Checking whether the Register button is disabled or not either by grabbing the property or by checking its UI behavior\n//homePage.getRegisterButton().should('have.attr','disabled','disabled');\n//homePage.getRegisterButton().should('be.disabled');\n// Clicking on to register on the Website by entering new password \n//Pause Command\n//cy.pause();\nhomePage.getPassword().type(this.data.NewPassword);\nhomePage.getRegisterButton().click(); //Checking whether the Registration is successful and whether UserName is populated under login section\nhomePage.getLoginUserName().should('have.value', this.data.Username); // For Loop for Accessing productName array from Features File\nthis.data.productName.forEach(function (element) {\n  cy.selectProduct(element[0], element[1], element[2]);\n}); //End to End Test Completion including Checkout and Placing Order\ncheckoutPage.getCartButton().click(); //Validate if the items we added are successfully there in the cart using should and expect together.\ncheckoutPage.getProducts().should(function ($p) {\n  expect($p).to.have.length(2); // There should be 2 items in cart.\n  expect($p.first()).to.contain(_this.data.productName[0][0]); // First Element should have blue denim\n  expect($p).to.contain(_this.data.productName[1][0]); // Verifying that playboy shirt should also be there\n});\ncheckoutPage.getCheckoutButton().click(); // Doing the Login and Entering the Billing Data\nbillingPage.getShowLogin().click();\nbillingPage.getLoginUserName().type(this.data.Email);\nbillingPage.getLoginPassword().type(this.data.Password);\nbillingPage.getLoginButton().click();\nbillingPage.getBillingFirstName().clear().type(this.data.BillingFirstName);\nbillingPage.getBillingLastName().clear().type(this.data.BillingLastName);\nbillingPage.getBillingAddress().clear().type(this.data.StreetAddress); //Changing the timeout from 4 seconds to 10 seconds\nCypress.config('defaultCommandTimeout', 10000); //\nbillingPage.getStateDropdown().click().then(function () {\n  billingPage.getStateSearchBox().clear().type('Haryana').type('{enter');\n});\nbillingPage.getBillingCity().clear().type(this.data.City);\nbillingPage.getBillingPostCode().clear().type(this.data.PostalCode);\nbillingPage.getBillingPhone().clear().type(this.data.Phone); //Placing the Order button click by selecting the checkbox\nbillingPage.getTermsCheckbox().click();\nbillingPage.getPlaceOrderButton().click(); // Assertion to check whether order has been successfully placed\nbillingPage.getOrderPlacedText().then(function (element) {\n  expect(element.text().includes(\"Thank you\")).to.be.true;\n}); //Mostly Used for TearDown Part\nafter(function () {});",
              "err": {},
              "uuid": "7996a659-c0d3-4eb8-bde5-1da434f3d7a8",
              "parentUUID": "b9c6abb0-e756-4e7f-b129-844e90fbd1bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7996a659-c0d3-4eb8-bde5-1da434f3d7a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {},
      "version": "4.0.1"
    }
  }
}